import static org.springframework.util.StringUtils.hasLength

plugins {
    id 'java'
    id 'java-library'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'com.google.osdetector' version '1.7.0'
    id 'com.google.cloud.tools.jib' version '3.3.1'
}

group = 'run.freshr'
version = '0.0.1'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    maven {
        url "https://:${GITHUB_READ_TOKEN}@maven.pkg.github.com/${GITHUB_OWNER}/*"
    }
    maven { url 'https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates' }
    mavenCentral()
}

ext {
    set('springCloudVersion', "2022.0.3")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    // Gateway
    implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Eureka Client
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Configuration Processor
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // LOMBOK
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Postgres
    implementation 'org.postgresql:postgresql'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "com.querydsl:querydsl-jpa:${dependencyManagement.importedProperties['querydsl.version']}:jakarta" // QueryDsl Jpa
    // QueryDsl Apt
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    testImplementation 'com.querydsl:querydsl-jpa' // QueryDsl Jpa
    testAnnotationProcessor 'com.querydsl:querydsl-apt' // QueryDsl Apt

    // Jakarta
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // Logback
    implementation 'net.logstash.logback:logstash-logback-encoder:7.2'

    // Docker Compose
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

    if (osdetector.arch == "aarch_64") { // MAC OS DNS 이슈
        implementation("io.netty:netty-all")
    }

    // FreshR
    implementation "${group}:library-core-utils:1.0.0.RELEASE"
    implementation "${group}:library-core-enumeration-mapper:1.0.0.RELEASE"
    implementation "${group}:library-core-exceptions:1.0.0.RELEASE"
    implementation "${group}:library-core-unit:1.0.0.RELEASE"

    implementation "${group}:library-util-minio:1.0.0.RELEASE"
    implementation 'io.minio:minio:8.5.5'

    api "${group}:configure-extensions:1.0.0.RELEASE"
    api "${group}:configure-jpa:1.0.0.RELEASE"
    api "${group}:configure-redis:1.0.0.RELEASE"

    api "${group}:freshr-extension-entity:1.0.0.RELEASE"
    api "${group}:freshr-extension-auth:1.0.0.RELEASE"
}

test {
    useJUnitPlatform()
}

jib {
    from {
        image = 'openjdk:17-jdk-alpine'
    }
    to {
        image = "${GITHUB_CONTAINER_PACKAGE}/${GITHUB_OWNER}/${rootProject.name}:" +
                System.getenv("GITHUB_PROFILE") +
                (hasLength(System.getenv("GITHUB_PROFILE")) ? "-" : "") +
                "${version}"
        auth {
            username = System.getenv("GITHUB_ACTOR").toString()
            password = System.getenv("GITHUB_TOKEN").toString()
        }
    }
}
