version: '3.7'
name: test
services:
  minio:
    container_name: ${MINIO_NAME}
    image: minio/minio
    ports:
      - ${MINIO_API_PORT}:9000
      - ${MINIO_UI_PORT}:9090
    environment:
      MINIO_ROOT_USER: ${MINIO_USERNAME:-}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-}
    volumes:
      - minio:/data
    command: server /data --console-address :9090
    networks:
      - bridge

#  minio-mc:
#    container_name: ${MINIO_MC_NAME}
#    image: minio/mc
#    depends_on:
#      - minio
#    entrypoint: >
#      /bin/sh -c "
#      /usr/bin/mc config host add local http://minio:9000 ${MINIO_USERNAME} ${MINIO_PASSWORD};
#      /usr/bin/mc mb local/${MINIO_BUCKET_NAME};
#      exit 0;
#      "
#    networks:
#      - bridge

  zookeeper:
    container_name: ${ZOOKEEPER_NAME}
    image: bitnami/zookeeper:latest
    restart: always
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
    extra_hosts:
      - kafka-gateway:host-gateway
    networks:
      - bridge

  kafka:
    container_name: ${KAFKA_NAME}
    image: bitnami/kafka:latest
    restart: always
    ports:
      - "${KAFKA_INTERNAL_PORT}:${KAFKA_INTERNAL_PORT}"
      - "${KAFKA_EXTERNAL_PORT}:${KAFKA_EXTERNAL_PORT}"
    environment:
      KAFKA_ENABLE_KRAFT: no
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: kafka-gateway:${ZOOKEEPER_PORT}
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:${KAFKA_INTERNAL_PORT},EXTERNAL://0.0.0.0:${KAFKA_EXTERNAL_PORT}
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://localhost:${KAFKA_INTERNAL_PORT},EXTERNAL://kafka-gateway:${KAFKA_EXTERNAL_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    extra_hosts:
      - kafka-gateway:host-gateway
    depends_on:
      - zookeeper
    networks:
      - bridge

  redis:
    container_name: ${REDIS_NAME}
    image: redis:latest
    ports:
      - "${REDIS_PORT}:6379"
    command: redis-server --bind ${REDIS_BIND} --maxmemory ${REDIS_MAX_MEMORY} --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis:/data
    networks:
      - bridge

  elasticsearch:
    container_name: ${ELASTICSEARCH_NAME}
    image: elasticsearch:8.7.0
    ports:
      - "${ELASTICSEARCH_HTTP_PORT}:9200"
      - "${ELASTICSEARCH_TCP_PORT}:9300"
    volumes:
      - ${ELASTICSEARCH_CONFIG_VOLUME}:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      discovery.type: single-node
    networks:
      - bridge

  kibana:
    container_name: ${KIBANA_NAME}
    build:
      context: ${KIBANA_CONTEXT}
      args:
        ELASTIC_VERSION: 8.7.0
    volumes:
      - ${KIBANA_CONFIG}:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - bridge
    depends_on:
      - elasticsearch

  postgres:
    container_name: ${POSTGRES_NAME}
    image: postgres:latest
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ${POSTGRES_INIT}:/docker-entrypoint-initdb.d/
      - postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: postgres -c log_destination=stderr -c log_statement=all -c max_connections=${POSTGRES_MAX_CONNECTIONS}
    networks:
      - bridge

networks:
  bridge:
    name: test
    driver: bridge

volumes:
  minio:
    name: ${MINIO_VOLUME}
  redis:
    name: ${REDIS_VOLUME_NAME}
  elasticsearch:
    name: ${ELASTICSEARCH_VOLUME_NAME}
  postgres:
    name: ${POSTGRES_VOLUME_NAME}
