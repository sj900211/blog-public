freshr:
  service:
    name: account
    serial: '03'
  logstash:
    name: ${freshr.service.name}
  auth:
    limit: 5184000
  rsa:
    limit: 300
  minio:
    except:
      - test
      - local

server:
  port: 407${freshr.service.serial}
  servlet:
    context-path: /${freshr.service.name}

eureka:
  instance:
    instance-id: ${spring.cloud.client.hostname}:${spring.application.instance_id:${random.value}}

spring:
  application:
    name: service-${freshr.logstash.name}

  docker:
    compose:
      enabled: false

  main:
    allow-circular-references: true
    allow-bean-definition-overriding: true

  profiles:
    active: test

  servlet:
    multipart:
      max-file-size: 10240MB
      max-request-size: 10240MB

  mvc:
    static-path-pattern: /resources/**

  thymeleaf:
    prefix: classpath:templates/
    suffix: .html
    mode: HTML
    cache: false
    check-template-location: true

  jackson:
    default-property-inclusion: non_null

  jpa:
    open-in-view: false
    show-sql: false
    generate-ddl: false
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        show_sql: false
        format_sql: false
        use_sql_comments: false
        jdbc:
          batch_size: 5
        default_batch_fetch_size: 1000

  datasource:
    hikari:
      minimumIdle: 200
      maximumPoolSize: 200
      poolName: SpringBootJPAHikariCP
      idleTimeout: 10000
      connection-timeout: 10000
      validation-timeout: 10000
      maxLifetime: 580000
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        useLocalTransactionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false

  kafka:
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.value.default.type: run.freshr.common.kafka.KafkaData

grpc:
  server:
    port: 408${freshr.service.serial}
  client:
    envoy:
      negotiation-type: plaintext

logging:
  level:
    root: error
    org.hibernate: error
    org.hibernate.SQL: error
    org.hibernate.orm.jdbc.bind: error
    org.hibernate.stat: error
    org.hibernate.SQL_SLOW: error
    org.hibernate.cache: error
    org.springframework.data.elasticsearch.core: error
    org.elasticsearch.client: error
    org.apache.http: error
    p6spy: off
